#include <cmath>
#include <math.h>
#include <iostream>
#include <vector>

using namespace std;

bool gluInvertMatrix(const double m[16], double invOut[16])
{
	double inv[16], det;
	int i;

	inv[0] = m[5] * m[10] * m[15] -
		m[5] * m[11] * m[14] -
		m[9] * m[6] * m[15] +
		m[9] * m[7] * m[14] +
		m[13] * m[6] * m[11] -
		m[13] * m[7] * m[10];

	inv[4] = -m[4] * m[10] * m[15] +
		m[4] * m[11] * m[14] +
		m[8] * m[6] * m[15] -
		m[8] * m[7] * m[14] -
		m[12] * m[6] * m[11] +
		m[12] * m[7] * m[10];

	inv[8] = m[4] * m[9] * m[15] -
		m[4] * m[11] * m[13] -
		m[8] * m[5] * m[15] +
		m[8] * m[7] * m[13] +
		m[12] * m[5] * m[11] -
		m[12] * m[7] * m[9];

	inv[12] = -m[4] * m[9] * m[14] +
		m[4] * m[10] * m[13] +
		m[8] * m[5] * m[14] -
		m[8] * m[6] * m[13] -
		m[12] * m[5] * m[10] +
		m[12] * m[6] * m[9];

	inv[1] = -m[1] * m[10] * m[15] +
		m[1] * m[11] * m[14] +
		m[9] * m[2] * m[15] -
		m[9] * m[3] * m[14] -
		m[13] * m[2] * m[11] +
		m[13] * m[3] * m[10];

	inv[5] = m[0] * m[10] * m[15] -
		m[0] * m[11] * m[14] -
		m[8] * m[2] * m[15] +
		m[8] * m[3] * m[14] +
		m[12] * m[2] * m[11] -
		m[12] * m[3] * m[10];

	inv[9] = -m[0] * m[9] * m[15] +
		m[0] * m[11] * m[13] +
		m[8] * m[1] * m[15] -
		m[8] * m[3] * m[13] -
		m[12] * m[1] * m[11] +
		m[12] * m[3] * m[9];

	inv[13] = m[0] * m[9] * m[14] -
		m[0] * m[10] * m[13] -
		m[8] * m[1] * m[14] +
		m[8] * m[2] * m[13] +
		m[12] * m[1] * m[10] -
		m[12] * m[2] * m[9];

	inv[2] = m[1] * m[6] * m[15] -
		m[1] * m[7] * m[14] -
		m[5] * m[2] * m[15] +
		m[5] * m[3] * m[14] +
		m[13] * m[2] * m[7] -
		m[13] * m[3] * m[6];

	inv[6] = -m[0] * m[6] * m[15] +
		m[0] * m[7] * m[14] +
		m[4] * m[2] * m[15] -
		m[4] * m[3] * m[14] -
		m[12] * m[2] * m[7] +
		m[12] * m[3] * m[6];

	inv[10] = m[0] * m[5] * m[15] -
		m[0] * m[7] * m[13] -
		m[4] * m[1] * m[15] +
		m[4] * m[3] * m[13] +
		m[12] * m[1] * m[7] -
		m[12] * m[3] * m[5];

	inv[14] = -m[0] * m[5] * m[14] +
		m[0] * m[6] * m[13] +
		m[4] * m[1] * m[14] -
		m[4] * m[2] * m[13] -
		m[12] * m[1] * m[6] +
		m[12] * m[2] * m[5];

	inv[3] = -m[1] * m[6] * m[11] +
		m[1] * m[7] * m[10] +
		m[5] * m[2] * m[11] -
		m[5] * m[3] * m[10] -
		m[9] * m[2] * m[7] +
		m[9] * m[3] * m[6];

	inv[7] = m[0] * m[6] * m[11] -
		m[0] * m[7] * m[10] -
		m[4] * m[2] * m[11] +
		m[4] * m[3] * m[10] +
		m[8] * m[2] * m[7] -
		m[8] * m[3] * m[6];

	inv[11] = -m[0] * m[5] * m[11] +
		m[0] * m[7] * m[9] +
		m[4] * m[1] * m[11] -
		m[4] * m[3] * m[9] -
		m[8] * m[1] * m[7] +
		m[8] * m[3] * m[5];

	inv[15] = m[0] * m[5] * m[10] -
		m[0] * m[6] * m[9] -
		m[4] * m[1] * m[10] +
		m[4] * m[2] * m[9] +
		m[8] * m[1] * m[6] -
		m[8] * m[2] * m[5];

	det = m[0] * inv[0] + m[1] * inv[4] + m[2] * inv[8] + m[3] * inv[12];

	if (det == 0)
		return false;

	det = 1.0 / det;

	for (i = 0; i < 16; i++)
		invOut[i] = inv[i] * det;

	return true;
}

double lsmm(vector<double>& X, vector<double>& u, vector<double>& w, vector<double>& Y) {

	int n = 31;

	//Define matrix
	vector<vector<double>> matrix = { {1,0,0,0},{1,0,0,0},{1,0,0,0},{1,0,0,0},{1,0,0,0},{1,0,0,0},{1,0,0,0},{1,0,0,0},{1,0,0,0},{1,0,0,0},{1,0,0,0},{1,0,0,0},{1,0,0,0},{1,0,0,0},{1,0,0,0},{1,0,0,0},{1,0,0,0},{1,0,0,0},{1,0,0,0},{1,0,0,0},{1,0,0,0},{1,0,0,0},{1,0,0,0},{1,0,0,0},{1,0,0,0},{1,0,0,0},{1,0,0,0},{1,0,0,0},{1,0,0,0},{1,0,0,0},{1,0,0,0} };
	for (int i = 0; i < n; i++) {
		matrix[i][1] = X[i];
		matrix[i][2] = u[i];
		matrix[i][3] = w[i];
	}
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < 4; j++) {
			cout << ' ' << matrix[i][j];
		}
		cout << endl;
	}
	//Find transpose
	vector<vector<double>> matrixtra = { {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} };
	for (int i = 0; i < 4; i++) {
		for (int j = 0; j < n; j++) {
			matrixtra[i][j] = matrix[j][i];
		}

	}
	for (int i = 0; i < 4; i++) {
		for (int j = 0; j < n; j++) {
			cout << ' ' << matrixtra[i][j];
		}
		cout << endl;
	}


	//Multiplying
	vector<vector<double>> prod = { {0,0,0,0},{0,0,0,0},{0,0,0,0},{0,0,0,0} };
	for (int i = 0; i < 4; i++) {
		for (int j = 0; j < 4; j++) {
			for (int k = 0; k < 31; k++) {
				prod[i][j] += matrixtra[i][k] * matrix[k][j];
			}
		}
	}
	cout << "PROD" << endl;
	for (int i = 0; i < 4; i++) {
		for (int j = 0; j < 4; j++) {
			cout << ' ' << prod[i][j];
		}
		cout << endl;
	}


	//Inverse of 4x4
	double aamatrix[16];
	double invOut[16];
	int k = 0;
	for (int i = 0; i < 4; i++) {
		for (int j = 0; j < 4; j++) {
			aamatrix[k] = prod[i][j];
			k++;
		}
	}
	gluInvertMatrix(aamatrix, invOut);



	vector<vector<double>> inv = { {0,0,0,0},{0,0,0,0},{0,0,0,0},{0,0,0,0} };
	int l = 0;
	for (int i = 0; i < 4; i++) {
		for (int j = 0; j < 4; j++) {
			inv[i][j] = invOut[l];
			l++;
		}
	}
	cout << "INV" << endl;
	for (int i = 0; i < 4; i++) {
		for (int j = 0; j < 4; j++) {
			cout << ' ' << inv[i][j];
		}
		cout << endl;
	}


	//Multiply by xt
	vector<vector<double>> prod2 = { {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} };
	for (int i = 0; i < 4; i++) {
		for (int j = 0; j < 31; j++) {
			for (int k = 0; k < 4; k++) {
				prod2[i][j] += inv[i][k] * matrixtra[k][j];
			}
		}
	}
	cout << "MUL" << endl;
	for (int i = 0; i < 4; i++) {
		for (int j = 0; j < 31; j++) {
			cout << ' ' << prod2[i][j];
		}
		cout << endl;
	}

	//Multiply by y {1,2,3,4,5,6,7}
	vector<double> ans = { 0,0,0,0 };
	for (int i = 0; i < 4; i++) {
		for (int k = 0; k < 31; k++) {
			ans[i] += prod2[i][k] * Y[k];
		}

	}

	for (int i = 0; i < 4; i++) {
		cout << "a" << i << " is: " << ans[i] << endl;
	}

	return 0;
}

void main() {

	vector<double> X = { 1,2,3,4,5,6,7 };
	vector<double> Y = { 0.5,2.5,2,4,3.5,6,5.5 };




	vector<double> x = { 0.0566,0.0674,0.0682,0.068,0.0683,0.0701,0.0718,0.0728,0.0749,0.0771,0.0777,0.0796,0.081,0.0836,0.0853,0.087,0.0863,0.0854,0.0835,0.0838,0.0832,0.0817,0.081,0.0804,0.0798,0.0792,0.0784,0.0773,0.0765,0.0651,0.102 };
	vector<double> u = { 4.797,5.478,6.385,7.394,8.678,9.917,11.837,13.047,15.231,16.711,18.314,20.171,21.357,23.564,32.559,37.145,43.56,50.456,56.844,65.755,77.946,89.644,101.773,114.895,127.256,140.251,155.947,173.109,191.783,206.982,199.689 };
	vector<double> w = { 87.0452165,88.8941756,90.7574049,92.6351297,94.5261958,96.4279129,98.3281218,100.233523,102.1434576,104.0500054,105.9633675,107.8970907,109.8313039,111.7415123,113.6264583,115.4638713,117.2373788,118.9691809,120.6734806,122.364016,124.061362,125.7621191,127.4487215,129.1132063,130.7246509,132.2866505,133.863634,135.419568,136.9003306,138.311205,139.6387 };
	vector<double> y = { 320.98,270.11,288.21,279.3,327.28,360.28,392.9,415.87,421.35,458.82,468.39,485.44,514.94,607.7,709.15,820.38,940.26,1216.74,1198.90,1341.89,1675.62,1823.05,1827.64,1856.72,2039.13,2103.59,2294.80,2651.47,2702.93,2835.61,2671.60 };

	cout << "LEAST SQUARE METHOD REGRESSION PLANE (SUMMATION METHOD)" << endl << endl;

	lsmm(x, u, w, y);
	cout << endl << endl;

}